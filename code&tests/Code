import matplotlib.pyplot as plt

# creation of PennyPlanner class
class PennyPlanner:
   def __init__(self):
       # to store budget information:
       self.budget = {}
       # store expense categories:
       self.expense_categories = set()  # use set() to prevent duplicates
       # list to store tuples of expense history (expense category and amount):
       self.expense_history = []

   # welcome the user
   def user_welcome(self):
       print(
           '\nWelcome to PennyPlanner, the app that will help you track your expenses and achieve your savings goals!')

   # create the users' monthly budget
   def create_budget(self):
       print()
       print('Let\'s start by setting up your budget for the month.')

       # storing and enabling user to input his monthly budget
       # make sure that the inputted budget is not 0
       while True:
           total_budget = float(input('Enter your total budget for the month: '))
           if total_budget > 0:
               break
           else:
               print('Total budget must be greater than 0. Please enter a valid number.')

       self.budget['Total Budget'] = total_budget  # to assign variable to a specific key in the dictionary

       # determining expense categories and allocating budget to each one of them
       while True:
           # adding as many categories as the user wants
           category = input('\nEnter an expense category (type "done" when finished): ')
           if category == 'done':
               break

           # user inputs corresponding budget for each category created
           budget_amount = float(input(f'Enter the budget for {category}: '))
           # to assign variables to specific keys in the dictionary
           self.budget[category] = budget_amount
           self.expense_categories.add(category)

       # allocate remaining budget to a 'savings' category
       self.budget['Savings'] = total_budget - sum(self.budget[key] for key in self.budget if key != 'Total Budget')

       # updated budget
       self.display_budget()

       # warning message if categories budget exceeds the total budget
       # user can still continue
       if self.budget['Savings'] < 0:
           print('Warning: The total budget has been exceeded.')

   # create pie chart that shows percentage of budget allocation
   def plot_budget_allocation(self):
       # exclude 'Total Budget' from the pie chart
       categories = [key for key in self.budget.keys() if key != 'Total Budget']
       amounts = [self.budget[key] for key in categories]

       plt.figure(figsize=(8, 8))
       plt.pie(amounts, labels=categories, autopct='%1.1f%%', startangle=140, colors=plt.cm.Paired.colors)
       plt.title('Budget Allocation')
       plt.show()

   # track user expenses
   def track_expenses(self):
       print()
       print('Let\'s start tracking your expenses.')

       # track expenses until the user inputs 'done'
       while True:
           category = input('\nEnter the expense category (or type "done" to finish): ')
           if category == 'done':
               break

           # make sure that the category inputted by the user already exists
           if category not in self.expense_categories:
               print('Invalid category. Please choose from your budgeted categories.')
               continue

           # get the expense amount
           amount = float(input('Enter the expense amount: '))
           # adjust the budget for the specified category by subtracting the expense amount
           self.budget[category] -= amount

           # save the expense in the expense history
           self.expense_history.append((category, amount))

           # confirm info about the expense recorded
           print(f'\nExpense of ${amount:.2f} in category "{category}" recorded.')
           # show updated budget
           self.display_budget()

           # warning if budget for that category has been exceeded
           if self.budget[category] < 0:
               print('Warning: You have exceeded your budget for this category!')

   # showing the users' current budget
   def display_budget(self):
       print('\nCurrent Budget:')
       # sort categories by amount using quicksort
       sorted_categories = self.quicksort([(key, self.budget[key]) for key in self.budget if key != 'Total Budget'])

       # iterate through each sorted category and its corresponding budget amounts
       for category, amount in sorted_categories:
           print(f'{category}: ${amount:.2f}')

   # showing expense history
   def display_expense_history(self):
       print('\nExpense History:')
       # iterate through each category and its corresponding expense amounts
       for category, amount in self.expense_history:
           print(f'{category}: ${amount:.2f}')

   # quicksort algorithm to sort the categories according to the budgets allocated in descending order
   def quicksort(self, lst):
       if len(lst) <= 1:
           return lst
       else:
           pivot = lst[0]
           smaller = [x for x in lst[1:] if x[1] <= pivot[1]]
           greater = [x for x in lst[1:] if x[1] > pivot[1]]
           return self.quicksort(greater) + [pivot] + self.quicksort(smaller)


def main():
   penny_planner = PennyPlanner()
   penny_planner.user_welcome()
   penny_planner.create_budget()
   penny_planner.plot_budget_allocation()
   penny_planner.track_expenses()
   penny_planner.display_expense_history()


main()

